name: Build and Push Docker Image

on:
  push:
    branches:
      - develop
    tags:
      - "*"
  pull_request:
    branches:
      - develop

permissions:
  contents: read
  packages: write

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install tparse
        run: go install github.com/mfridman/tparse@latest

      - name: Run tests
        id: tests
        run: |
          mkdir -p .ci-artifacts
          set -o pipefail && go test -json ./... -cover -coverprofile=.ci-artifacts/coverage.out > .ci-artifacts/go-test.json
          tparse -nocolor -all -file .ci-artifacts/go-test.json | tee .ci-artifacts/test.log

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: .ci-artifacts/coverage.out

      - name: Add test summary
        if: always()
        run: |
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          cat .ci-artifacts/test.log >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"

      - name: Determine image tags
        id: tags
        run: |
          IMAGE=ghcr.io/visualizeq/jira-discord-webhook
          TAGS=()
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            :
          elif [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            TAGS+=("$IMAGE:main")
          elif [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            TAGS+=("$IMAGE:develop")
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
            TAGS+=("$IMAGE:main" "$IMAGE:${TAG_NAME}")
          fi
          {
            echo "tags<<EOF"
            printf "%s\n" "${TAGS[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Build and push
        if: steps.tags.outputs.tags != ''
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.tags.outputs.tags }}

  release:
    needs: docker
    if: needs.docker.result == 'success' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}

      - name: Generate release notes
        id: cliff
        uses: orhun/git-cliff-action@v2
        with:
          config: cliff.toml
          output: release.md

      - name: Check release notes
        run: test -f release.md

      - name: Set tag name
        id: vars
        run: |
          git fetch --tags
          if git describe --tags --exact-match >/dev/null 2>&1; then
            TAG=$(git describe --tags --exact-match)
          else
            TAG=main
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release.md
          tag_name: ${{ steps.vars.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
